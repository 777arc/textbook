options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: Custom
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: rds_rx
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Stereo FM receiver and RDS Decoder
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 12.0]
    rotation: 0
    state: enabled

blocks:
- name: decimation
  id: variable
  parameters:
    comment: ''
    value: '8'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 132.0]
    rotation: 0
    state: true
- name: freq
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 0, 0,1, 1
    label: Frequency
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '77'
    step: '0.1'
    stop: '108'
    value: '95.5'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 12.0]
    rotation: 0
    state: true
- name: freq_offset
  id: variable
  parameters:
    comment: ''
    value: '250000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 132.0]
    rotation: 0
    state: enabled
- name: freq_tune
  id: variable
  parameters:
    comment: ''
    value: freq*1e6 - freq_offset
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [104, 132.0]
    rotation: 0
    state: enabled
- name: gain
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 2, 0,1, 1
    label: RF Gain
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '1'
    stop: '49.6'
    value: '25'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [608, 12.0]
    rotation: 0
    state: true
- name: pilot_taps
  id: variable_band_pass_filter_taps
  parameters:
    beta: '6.76'
    comment: ''
    gain: '1.0'
    high_cutoff_freq: '19020'
    low_cutoff_freq: '18980'
    samp_rate: '240000'
    type: complex_band_pass
    width: '1000'
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1040, 12.0]
    rotation: 0
    state: true
- name: rrc_taps
  id: variable_rrc_filter_taps
  parameters:
    alpha: '1.0'
    comment: ''
    gain: '1.0'
    ntaps: '151'
    samp_rate: '19000'
    sym_rate: 19000/8
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 604.0]
    rotation: 0
    state: true
- name: rrc_taps_manchester
  id: variable
  parameters:
    comment: ''
    value: '[rrc_taps[n] - rrc_taps[n+8] for n in range(len(rrc_taps)-8)]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [24, 732.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '2000000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 132]
    rotation: 0
    state: enabled
- name: volume
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 1, 0,1, 1
    label: Volume
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '-20'
    step: '1'
    stop: '10'
    value: '-6'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [856, 12.0]
    rotation: 0
    state: true
- name: analog_agc_xx_0
  id: analog_agc_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    gain: '53'
    max_gain: '1000'
    maxoutbuf: '0'
    minoutbuf: '0'
    rate: 2e-3
    reference: '0.585'
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1480, 460.0]
    rotation: 0
    state: disabled
- name: analog_const_source_x_0
  id: analog_const_source_x
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1208, 924.0]
    rotation: 0
    state: disabled
- name: analog_fm_deemph_0_0_0
  id: analog_fm_deemph
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: '48000'
    tau: 75e-6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2152, 276.0]
    rotation: 0
    state: enabled
- name: analog_pll_refout_cc_0
  id: analog_pll_refout_cc
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    max_freq: 2 * math.pi * 19020 / 240000
    maxoutbuf: '0'
    min_freq: 2 * math.pi * 18980 / 240000
    minoutbuf: '0'
    w: '0.001'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 268.0]
    rotation: 0
    state: true
- name: analog_quadrature_demod_cf_0
  id: analog_quadrature_demod_cf
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    gain: (samp_rate / decimation) / (2*math.pi*75000)
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [520, 284.0]
    rotation: 0
    state: disabled
- name: analog_sig_source_x_0
  id: analog_sig_source_x
  parameters:
    affinity: ''
    alias: ''
    amp: '1'
    comment: ''
    freq: '57000'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    phase: '0'
    samp_rate: samp_rate/8
    type: complex
    waveform: analog.GR_COS_WAVE
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1392, 972.0]
    rotation: 0
    state: disabled
- name: audio_sink_0
  id: audio_sink
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    device_name: ''
    num_inputs: '1'
    ok_to_block: 'True'
    samp_rate: '48000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2408, 340.0]
    rotation: 0
    state: enabled
- name: blocks_add_xx_0
  id: blocks_add_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2040, 272.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_imag_0
  id: blocks_complex_to_imag
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1496, 352.0]
    rotation: 0
    state: enabled
- name: blocks_delay_0
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: (len(pilot_taps) - 1) // 2
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1288, 168.0]
    rotation: 0
    state: true
- name: blocks_file_sink_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: /home/marc/Downloads/fm_clip_for_rds.iq
    type: complex
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 396.0]
    rotation: 0
    state: disabled
- name: blocks_file_sink_1
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: /home/marc/Downloads/test.iq
    type: complex
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1696, 492.0]
    rotation: 0
    state: disabled
- name: blocks_file_sink_2
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: /home/marc/Downloads/working_bytes.uint8
    type: byte
    unbuffered: 'False'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1088, 1008.0]
    rotation: 0
    state: true
- name: blocks_file_source_0
  id: blocks_file_source
  parameters:
    affinity: ''
    alias: ''
    begin_tag: pmt.PMT_NIL
    comment: ''
    file: /home/marc/Downloads/fm_clip_for_rds.iq
    length: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    repeat: 'False'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [256, 380.0]
    rotation: 0
    state: disabled
- name: blocks_file_source_0_0
  id: blocks_file_source
  parameters:
    affinity: ''
    alias: ''
    begin_tag: pmt.PMT_NIL
    comment: ''
    file: /home/marc/Downloads/fm_rds_250k_from_sdrplay.iq
    length: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    repeat: 'False'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [304, 524.0]
    rotation: 0
    state: enabled
- name: blocks_float_to_complex_0
  id: blocks_float_to_complex
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1424, 856.0]
    rotation: 0
    state: disabled
- name: blocks_head_0
  id: blocks_head
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_items: '1000000'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [112, 412.0]
    rotation: 0
    state: disabled
- name: blocks_keep_one_in_n_0
  id: blocks_keep_one_in_n
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    n: '10'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1920, 888.0]
    rotation: 0
    state: disabled
- name: blocks_message_debug_0
  id: blocks_message_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    en_uvec: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1728, 632.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_const_vxx_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: 10**(1.*(volume)/10)
    maxoutbuf: '0'
    minoutbuf: '0'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2328, 284.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_xx_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1416, 272.0]
    rotation: 0
    state: true
- name: blocks_multiply_xx_1
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1688, 320.0]
    rotation: 0
    state: true
- name: blocks_multiply_xx_2
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1616, 872.0]
    rotation: 0
    state: disabled
- name: blocks_null_sink_0
  id: blocks_null_sink
  parameters:
    affinity: ''
    alias: ''
    bus_structure_sink: '[[0,],]'
    comment: ''
    num_inputs: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1088, 696.0]
    rotation: 0
    state: true
- name: blocks_null_sink_0_0
  id: blocks_null_sink
  parameters:
    affinity: ''
    alias: ''
    bus_structure_sink: '[[0,],]'
    comment: ''
    num_inputs: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1088, 728.0]
    rotation: 0
    state: true
- name: blocks_null_sink_0_1
  id: blocks_null_sink
  parameters:
    affinity: ''
    alias: ''
    bus_structure_sink: '[[0,],]'
    comment: ''
    num_inputs: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1088, 664.0]
    rotation: 0
    state: true
- name: digital_clock_recovery_mm_xx_0
  id: digital_clock_recovery_mm_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    gain_mu: '0.5'
    gain_omega: '0.00'
    maxoutbuf: '0'
    minoutbuf: '0'
    mu: '0.01'
    omega: '16'
    omega_relative_limit: '0.00'
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [736, 876.0]
    rotation: 0
    state: enabled
- name: digital_constellation_receiver_cb_0
  id: digital_constellation_receiver_cb
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: digital.constellation_bpsk().base()
    fmax: '0.002'
    fmin: '-0.002'
    loop_bw: 2*math.pi / 100
    maxoutbuf: '0'
    minoutbuf: '0'
    showports: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [800, 632.0]
    rotation: 0
    state: true
- name: digital_diff_decoder_bb_0
  id: digital_diff_decoder_bb
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    modulus: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1072, 628.0]
    rotation: 0
    state: enabled
- name: digital_symbol_sync_xx_0
  id: digital_symbol_sync_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: digital.constellation_bpsk().base()
    damping: '1.0'
    loop_bw: '0.01'
    max_dev: '0.1'
    maxoutbuf: '0'
    minoutbuf: '0'
    nfilters: '128'
    osps: '1'
    pfb_mf_taps: '[]'
    resamp_type: digital.IR_MMSE_8TAP
    sps: '16'
    ted_gain: '1.0'
    ted_type: digital.TED_ZERO_CROSSING
    type: cc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [464, 644.0]
    rotation: 0
    state: disabled
- name: digital_symbol_sync_xx_0_0
  id: digital_symbol_sync_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: digital.constellation_bpsk().base()
    damping: '1.0'
    loop_bw: '0.01'
    max_dev: '0.1'
    maxoutbuf: '0'
    minoutbuf: '0'
    nfilters: '128'
    osps: '1'
    pfb_mf_taps: '[]'
    resamp_type: digital.IR_MMSE_8TAP
    sps: '16'
    ted_gain: '5'
    ted_type: digital.TED_MUELLER_AND_MULLER
    type: cc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [352, 844.0]
    rotation: 0
    state: disabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk(gr.sync_block):  # other base classes\
      \ are basic_block, decim_block, interp_block\n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self):  # only\
      \ default arguments here\n        \"\"\"arguments to this function show up as\
      \ parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n            self,\n\
      \            name='Quadrature Demod Python',   # will show up in GRC\n     \
      \       in_sig=[np.complex64],\n            out_sig=[np.float32]\n        )\n\
      \        # if an attribute with the same name as a parameter is found,\n   \
      \     # a callback is registered (properties work, too).\n\n\n    def work(self,\
      \ input_items, output_items):\n        output_items[0][0:-1] = 0.5 * np.angle(input_items[0][0:-1]\
      \ * np.conj(input_items[0][1:])) # see https://wiki.gnuradio.org/index.php/Quadrature_Demod\n\
      \        return len(output_items[0] - 1)\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Quadrature Demod Python', 'blk', [], [('0', 'complex', 1)], [('0',
      'float', 1)], 'Embedded Python Block example - a simple multiply const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [504, 336.0]
    rotation: 0
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nfrom gnuradio.filter import firdes\nfrom scipy.signal\
      \ import lfilter\n\nclass blk(gr.decim_block):  # other base classes are basic_block,\
      \ decim_block, interp_block\n    \"\"\"Embedded Python Block example - a simple\
      \ multiply const\"\"\"\n\n    def __init__(self):  # only default arguments\
      \ here\n        \"\"\"arguments to this function show up as parameters in GRC\"\
      \"\"\n        gr.decim_block.__init__(\n            self,\n            name='Freq\
      \ Shift and Filter',   # will show up in GRC\n            in_sig=[np.float32],\n\
      \            out_sig=[np.complex64],\n            decim=10 # like original block\n\
      \        )\n        self.set_relative_rate(1.0/10)\n        # if an attribute\
      \ with the same name as a parameter is found,\n        # a callback is registered\
      \ (properties work, too).\n\n\n    def work(self, input_items, output_items):\n\
      \        N = len(input_items[0])\n        if N >= 1000:\n            N = 1000\
      \ # still not sure why but this fixes it\n            samp_rate = 250e3 # sample\
      \ rate of file\n            f_o = -57e3\n            t = np.arange(N)/samp_rate\n\
      \n            # Try band pass filtering before shift\n            #taps = firdes.complex_band_pass(1.0,\
      \ samp_rate, f_o - 7.5e3, f_o + 7.5e3, 5e3) # same as original flowgraph\n \
      \           #out = np.convolve(input_items[0], taps, 'same') # low pass filter\n\
      \            out = input_items[0][0:N]\n\n            out = out * np.exp(2j*np.pi*f_o*t)\
      \ # SHOULDNT MATTER WHICH DIRECTION BECAUSE INPUT SIGNAL IS REAL OR BECAUSE\
      \ RDS IS REDUNDANT\n            \n            \n            \n            taps\
      \ = firdes.low_pass(1.0, samp_rate, 7.5e3, 5e3) # same as original flowgraph\n\
      \            out = np.convolve(out, taps, 'same') # low pass filter\n      \
      \      #out = lfilter(taps, [1.0], out) # looks same as convolve when using\
      \ 'same'\n            out = out[::10] # decimate\n            out = out.astype(np.complex64)\
      \ # not actually needed\n            output_items[0][0:len(out)] = out\n\n \
      \           return len(out)\n        else:\n            return 0\n         \
      \   \n    # NOTE I GOT THIS TO WORK BUT ITS NOT DECODING AS WELL AS THE ORIGINAL!\
      \  AND THE NEGATIVE SIGN IN EXP DIDNT MAKE A DIFFERENCE!\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Freq Shift and Filter', 'blk', [], [('0', 'float', 1)], [('0', 'complex',
      1)], 'Embedded Python Block example - a simple multiply const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [624, 560.0]
    rotation: 0
    state: enabled
- name: epy_block_2
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nfrom scipy.signal import resample_poly\n\nclass blk(gr.basic_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Embedded Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.basic_block.__init__(\n        \
      \    self,\n            name='Rational Resampler Python',   # will show up in\
      \ GRC\n            in_sig=[np.complex64],\n            out_sig=[np.complex64]\n\
      \        )\n\n\n    def general_work(self, input_items, output_items):\n   \
      \     \"\"\"example: multiply with constant\"\"\"\n        if len(input_items[0])\
      \ > 2000: # just to be safe\n            out = resample_poly(input_items[0],\
      \ 19, 25) # goes from the current 25k to 19k\n            output_items[0][0:len(out)]\
      \ = out\n            self.consume(0, len(input_items[0])) # consume all on the\
      \ input port\n            return len(out) # tell it how many outputs we made\n\
      \        else:\n            return 0\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Rational Resampler Python', 'blk', [], [('0', 'complex', 1)], [('0',
      'complex', 1)], 'Embedded Python Block example - a simple multiply const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [928, 556.0]
    rotation: 0
    state: enabled
- name: epy_block_3
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nfrom gnuradio.filter import firdes\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Embedded Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n         \
      \   self,\n            name='manchester',   # will show up in GRC\n        \
      \    in_sig=[np.complex64],\n            out_sig=[np.complex64]\n        )\n\
      \        rrc_taps = firdes.root_raised_cosine(1, 19e3, 19e3/8, 1, 151) # gain,\
      \ samp_rate, symbol_rate, alpha, n_taps\n        self.taps = [rrc_taps[n] -\
      \ rrc_taps[n+8] for n in range(len(rrc_taps)-8)]\n\n    def work(self, input_items,\
      \ output_items):\n        \"\"\"example: multiply with constant\"\"\"\n    \
      \    if len(input_items[0]) > 1000:\n            output_items[0][:] = np.convolve(input_items[0],\
      \ self.taps, 'same')\n            return len(output_items[0])\n        else:\n\
      \            return 0\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('manchester', 'blk', [], [('0', 'complex', 1)], [('0', 'complex',
      1)], 'Embedded Python Block example - a simple multiply const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1192, 540.0]
    rotation: 0
    state: enabled
- name: epy_block_4
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\n# Constants\nsyndrome = [383, 14, 303,\
      \ 663, 748]\noffset_pos = [0, 1, 2, 3, 2]\noffset_word = [252, 408, 360, 436,\
      \ 848]\n\n# see Annex B, page 64 of the standard\ndef calc_syndrome(message,\
      \ mlen):\n    reg = 0\n    poly = 0x5B9 # const unsigned long \n    plen = 10\
      \ # const unsigned char \n    \n    for i in range(mlen, 0, -1):\n        reg\
      \ = (reg << 1) | ((message >> (i-1)) & 0x01)\n        if (reg & (1 << plen)):\n\
      \            reg = reg ^ poly\n    \n    for i in range(plen, 0, -1):\n    \
      \    reg = reg << 1\n        if (reg & (1 << plen)):\n            reg = reg\
      \ ^ poly\n    return reg & ((1 << plen) - 1) # select the bottom plen bits of\
      \ reg\n\n\n\nclass blk(gr.sync_block):  # other base classes are basic_block,\
      \ decim_block, interp_block\n    \"\"\"Embedded Python Block example - a simple\
      \ multiply const\"\"\"\n\n    def __init__(self):  # only default arguments\
      \ here\n        \"\"\"arguments to this function show up as parameters in GRC\"\
      \"\"\n        gr.sync_block.__init__(\n            self,\n            name='RDS\
      \ Decoder Python',   # will show up in GRC\n            in_sig=[np.uint8],\n\
      \            out_sig=None\n        )\n        self.synced = False\n        self.presync\
      \ = False\n        self.wrong_blocks_counter = 0\n        self.blocks_counter\
      \ = 0\n        self.group_good_blocks_counter = 0\n        self.block_number\
      \ = 0\n        self.group_assembly_started = False\n        self.block_bit_counter\
      \ = 0\n        self.reg = np.uint32(0) # was unsigned long in C++ (64 bits)\
      \ but numpy doesnt support bitwise ops of uint64\n        self.bit_counter =\
      \ 0\n        self.offset_chars = ['z','z','z','z'] # 4 chars, need to be separated\
      \ because strings are not mutable\n        self.lastseen_offset_counter = 0\n\
      \        self.lastseen_offset = 0\n        self.group = [0,0,0,0]\n        self.message_port_register_out(pmt.intern('msg_out'))\n\
      \n\n    def work(self, input_items, output_items):\n        noutput_items =\
      \ len(input_items[0])\n        \n        if noutput_items < 104: # process 104\
      \ at a time, 1 msg output\n            return 0\n        \n        # Just process\
      \ 1 msg at a time\n        noutput_items = 104\n    \n        # the synchronization\
      \ process is described in Annex C, page 66 of the standard */\n        i = 0\n\
      \        while (i < noutput_items):\n            # in C++ reg doesn't get init\
      \ so it will be random at first, for ours its 0s\n            # It was also\
      \ an unsigned long but never seemed to get anywhere near the max value\n   \
      \         # input_items are either 0 or 1\n            self.reg = np.bitwise_or(np.left_shift(self.reg,\
      \ 1), input_items[0][i]) # reg contains the last 26 rds bits. these are both\
      \ bitwise ops\n            #print('reg: ', self.reg)\n            if not self.synced:\n\
      \                reg_syndrome = calc_syndrome(self.reg, 26)\n              \
      \  for j in range(5):\n                    if reg_syndrome == syndrome[j]:\n\
      \                        if not self.presync:\n                            self.lastseen_offset\
      \ = j\n                            self.lastseen_offset_counter = self.bit_counter\n\
      \                            self.presync = True\n                        else:\n\
      \                            bit_distance=self.bit_counter - self.lastseen_offset_counter\n\
      \                            if offset_pos[self.lastseen_offset] >= offset_pos[j]:\n\
      \                                block_distance = offset_pos[j] + 4 - offset_pos[self.lastseen_offset]\n\
      \                            else:\n                                block_distance\
      \ = offset_pos[j] - offset_pos[self.lastseen_offset]\n                     \
      \       if (block_distance*26) != bit_distance:\n                          \
      \      self.presync = False\n                            else:\n           \
      \                     print('Sync State Detected')\n                       \
      \         self.wrong_blocks_counter = 0\n                                self.blocks_counter\
      \ = 0\n                                self.block_bit_counter = 0\n        \
      \                        self.block_number = (j + 1) % 4\n                 \
      \               self.group_assembly_started = False\n                      \
      \          self.synced = True\n                    break #syndrome found, no\
      \ more cycles\n\n            else: # SYNCED\n                # wait until 26\
      \ bits enter the buffer */\n                if self.block_bit_counter < 25:\n\
      \                    self.block_bit_counter += 1\n                else:\n  \
      \                  good_block = False\n                    dataword = (self.reg\
      \ >> 10) & 0xffff\n                    block_calculated_crc = calc_syndrome(dataword,\
      \ 16)\n                    checkword = self.reg & 0x3ff\n                  \
      \  # manage special case of C or C' offset word */\n                    if (self.block_number==2):\n\
      \                        block_received_crc=checkword^offset_word[self.block_number]\n\
      \                        if (block_received_crc==block_calculated_crc):\n  \
      \                          good_block = True\n                            offset_char\
      \ = 'C'\n                        else:\n                            block_received_crc=checkword\
      \ ^ offset_word[4]\n                            if (block_received_crc==block_calculated_crc):\n\
      \                                good_block = True\n                       \
      \         offset_char = 'c'  # C' (C-Tag)\n                            else:\n\
      \                                self.wrong_blocks_counter += 1\n          \
      \                      good_block = False\n                    else:\n     \
      \                   block_received_crc = checkword ^ offset_word[self.block_number]\
      \ # bitwise xor\n                        if block_received_crc == block_calculated_crc:\n\
      \                            good_block = True\n                           \
      \ if (self.block_number==0):\n                                offset_char =\
      \ 'A'\n                            elif (self.block_number==1):\n          \
      \                      offset_char = 'B'\n                            elif (self.block_number==3):\n\
      \                                offset_char = 'D'\n                       \
      \ else:\n                            self.wrong_blocks_counter += 1\n      \
      \                      good_block = False\n                        \n      \
      \              # done checking CRC */\n                    if self.block_number\
      \ == 0 and good_block:\n                        self.group_assembly_started\
      \ = True\n                        self.group_good_blocks_counter = 1\n     \
      \                   \n                    if self.group_assembly_started:\n\
      \                        if not good_block:\n                            self.group_assembly_started\
      \ = False\n                        else:\n                            self.group[self.block_number]\
      \ = dataword\n                            self.offset_chars[self.block_number]\
      \ = offset_char\n                            self.group_good_blocks_counter\
      \ += 1\n                            print('group_good_blocks_counter:', self.group_good_blocks_counter)\n\
      \                        if self.group_good_blocks_counter == 5:\n         \
      \                   # raw data bytes, as received from RDS. 8 info bytes, followed\
      \ by 4 RDS offset chars: ABCD/ABcD/EEEE (in US)\n                          \
      \  bytes = bytearray(12) # 12 bytes filled with 0s\n\n                     \
      \       # RDS information words\n                            bytes[0] = (self.group[0]\
      \ >> 8) & 255\n                            bytes[1] = (self.group[0]     ) &\
      \ 255\n                            bytes[2] = (self.group[1] >> 8) & 255\n \
      \                           bytes[3] = (self.group[1]     ) & 255\n        \
      \                    bytes[4] = (self.group[2] >> 8) & 255\n               \
      \             bytes[5] = (self.group[2]     ) & 255\n                      \
      \      bytes[6] = (self.group[3] >> 8) & 255\n                            bytes[7]\
      \ = (self.group[3]     ) & 255\n\n                            # RDS offset words\n\
      \                            bytes[8] = self.offset_chars[0].encode()[0]\n \
      \                           bytes[9] = self.offset_chars[1].encode()[0]\n  \
      \                          bytes[10] = self.offset_chars[2].encode()[0]\n  \
      \                          bytes[11] = self.offset_chars[3].encode()[0]\n  \
      \                      \n                            print(bytes)\n        \
      \                    \n                            #data = pmt.make_blob(bytes,\
      \ 12)\n                            #meta = pmt.PMT_NIL\n                   \
      \         #pdu = pmt.cons(meta, data) # make PDU: (metadata, data) pair\n  \
      \                          #self.message_port_pub(pmt.intern('msg_out'), pdu)\n\
      \n                    self.block_bit_counter = 0\n                    self.block_number\
      \ = (self.block_number + 1) % 4\n                    self.blocks_counter +=\
      \ 1\n                    # 1187.5 bps / 104 bits = 11.4 groups/sec, or 45.7\
      \ blocks/sec */\n                    if self.blocks_counter == 50:\n       \
      \                 if self.wrong_blocks_counter > 35:\n                     \
      \       print(\"@@@@@ Lost Sync (Got \", self.wrong_blocks_counter, \" bad blocks\
      \ on \", self.blocks_counter, \" total)\")\n                            self.synced\
      \ = False\n                            self.presync = False\n              \
      \          else:\n                            print(\"@@@@@ Still Sync-ed (Got\
      \ \", self.wrong_blocks_counter, \" bad blocks on \", self.blocks_counter, \"\
      \ total)\")\n                        self.blocks_counter = 0\n             \
      \           self.wrong_blocks_counter = 0\n            i += 1\n            self.bit_counter\
      \ += 1\n      \n\n    \n        return noutput_items\n\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('RDS Decoder Python', 'blk', [], [('0', 'byte', 1)], [('msg_out',
      'message', 1)], 'Embedded Python Block example - a simple multiply const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1248, 692.0]
    rotation: 0
    state: disabled
- name: epy_block_5
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\n\nrds_group_acronyms = [\"BASIC\", \"PIN/SL\"\
      , \"RT\", \"AID\", \"CT\", \"TDC\", \"IH\", \"RP\", \"TMC\", \"EWS\", \"___\"\
      , \"___\", \"___\", \"___\", \"EON\", \"___\"]\n    \n# Annex F of RBDS Standard\
      \ Table F.1 (North America) and Table F.2 (Europe)\npty_table = [[\"Undefined\"\
      ,             \"Undefined\"],\n             [\"News\",                  \"News\"\
      ],\n             [\"Current Affairs\",       \"Information\"],\n           \
      \  [\"Information\",           \"Sports\"],\n             [\"Sport\",      \
      \           \"Talk\"],\n             [\"Education\",             \"Rock\"],\n\
      \             [\"Drama\",                 \"Classic Rock\"],\n             [\"\
      Culture\",               \"Adult Hits\"],\n             [\"Science\",      \
      \         \"Soft Rock\"],\n             [\"Varied\",                \"Top 40\"\
      ],\n             [\"Pop Music\",             \"Country\"],\n             [\"\
      Rock Music\",            \"Oldies\"],\n             [\"Easy Listening\",   \
      \     \"Soft\"],\n             [\"Light Classical\",       \"Nostalgia\"],\n\
      \             [\"Serious Classical\",     \"Jazz\"],\n             [\"Other\
      \ Music\",           \"Classical\"],\n             [\"Weather\",           \
      \    \"Rhythm & Blues\"],\n             [\"Finance\",               \"Soft Rhythm\
      \ & Blues\"],\n             [\"Children\u2019s Programmes\", \"Language\"],\n\
      \             [\"Social Affairs\",        \"Religious Music\"],\n          \
      \   [\"Religion\",              \"Religious Talk\"],\n             [\"Phone-In\"\
      ,              \"Personality\"],\n             [\"Travel\",                \"\
      Public\"],\n             [\"Leisure\",               \"College\"],\n       \
      \      [\"Jazz Music\",            \"Spanish Talk\"],\n             [\"Country\
      \ Music\",          \"Spanish Music\"],\n             [\"National Music\", \
      \       \"Hip Hop\"],\n             [\"Oldies Music\",          \"Unassigned\"\
      ],\n             [\"Folk Music\",            \"Unassigned\"],\n            \
      \ [\"Documentary\",           \"Weather\"],\n             [\"Alarm Test\", \
      \           \"Emergency Test\"],\n             [\"Alarm\",                 \"\
      Emergency\"]]\npty_locale = 1 # set to 0 for europe\n\n\n# page 72, Annex D,\
      \ table D.2 in the standard\ncoverage_area_codes = [\"Local\",\n           \
      \            \"International\",\n                       \"National\",\n    \
      \                   \"Supra-regional\",\n                       \"Regional 1\"\
      ,\n                       \"Regional 2\",\n                       \"Regional\
      \ 3\",\n                       \"Regional 4\",\n                       \"Regional\
      \ 5\",\n                       \"Regional 6\",\n                       \"Regional\
      \ 7\",\n                       \"Regional 8\",\n                       \"Regional\
      \ 9\",\n                       \"Regional 10\",\n                       \"Regional\
      \ 11\",\n                       \"Regional 12\"]\n    \n\n# page 71, Annex D,\
      \ table D.1 in the standard, or http://poupa.cz/rds/countrycodes.htm\npi_country_codes\
      \ = [[\"DE\",\"GR\",\"MA\",\"__\",\"MD\"],\n                    [\"DZ\",\"CY\"\
      ,\"CZ\",\"IE\",\"EE\"],\n                    [\"AD\",\"SM\",\"PL\",\"TR\",\"\
      __\"],\n                    [\"IL\",\"CH\",\"VA\",\"MK\",\"__\"],\n        \
      \            [\"IT\",\"JO\",\"SK\",\"__\",\"__\"],\n                    [\"\
      BE\",\"FI\",\"SY\",\"__\",\"UA\"],\n                    [\"RU\",\"LU\",\"TN\"\
      ,\"__\",\"__\"],\n                    [\"PS\",\"BG\",\"__\",\"NL\",\"PT\"],\n\
      \                    [\"AL\",\"DK\",\"LI\",\"LV\",\"SI\"],\n               \
      \     [\"AT\",\"GI\",\"IS\",\"LB\",\"__\"],\n                    [\"HU\",\"\
      IQ\",\"MC\",\"__\",\"__\"],\n                    [\"MT\",\"GB\",\"LT\",\"HR\"\
      ,\"__\"],\n                    [\"DE\",\"LY\",\"YU\",\"__\",\"__\"],\n     \
      \               [\"__\",\"RO\",\"ES\",\"SE\",\"__\"],\n                    [\"\
      EG\",\"FR\",\"NO\",\"BY\",\"BA\"]]\n    \n\n\n\n\n\nclass blk(gr.basic_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Embedded Python Block example - a simple multiply const\"\"\"\n\n    def __init__(self):\
      \  # only default arguments here\n        \"\"\"arguments to this function show\
      \ up as parameters in GRC\"\"\"\n        gr.basic_block.__init__(\n        \
      \    self,\n            name='RDS Parser Python',   # will show up in GRC\n\
      \            in_sig=None,\n            out_sig=None\n        )\n\n        self.radiotext_AB_flag\
      \ = 0\n        self.radiotext = [' ']*65\n        \n        self.message_port_register_in(pmt.intern('msg_in'))\n\
      \        self.set_msg_handler(pmt.intern('msg_in'), self.handle_msg)\n\n   \
      \ # The only type we will bother decoding, it's the radiotext that shows up\
      \ on the screen\n    def decode_type2(self, group_1, group_2, group_3, ab):\n\
      \        text_segment_address_code = group_1 & 0x0f\n\n        # when the A/B\
      \ flag is toggled, flush your current radiotext\n        if self.radiotext_AB_flag\
      \ != ((group_1 >> 4) & 0x01):\n            self.radiotext = [' ']*65\n\n   \
      \     self.radiotext_AB_flag = (group_1 >> 4) & 0x01\n\n        if not ab:\n\
      \            self.radiotext[text_segment_address_code *4     ] = chr((group_2\
      \ >> 8) & 0xff)\n            self.radiotext[text_segment_address_code * 4 +\
      \ 1] = chr(group_2        & 0xff)\n            self.radiotext[text_segment_address_code\
      \ * 4 + 2] = chr((group_3 >> 8) & 0xff)\n            self.radiotext[text_segment_address_code\
      \ * 4 + 3] = chr(group_3        & 0xff)\n        else:\n            self.radiotext[text_segment_address_code\
      \ * 2    ] = chr((group_3 >> 8) & 0xff)\n            self.radiotext[text_segment_address_code\
      \ * 2 + 1] = chr(group_3        & 0xff)\n\n        print(\"====radiotext====\"\
      , ''.join(self.radiotext))\n        \n        return\n    \n    def handle_msg(self,\
      \ msg):\n        bytes = pmt.to_python(pmt.cdr(msg)) # np array of uint8's/chars,\
      \ always len 12, 8 data + 4 offset chars, either \"ABCD\", \"ABcD\", \"EEEE\"\
      \ (in US)\n        \n        group_0 = bytes[1] | (bytes[0] << 8)\n        group_1\
      \ = bytes[3] | (bytes[2] << 8)\n        group_2 = bytes[5] | (bytes[4] << 8)\n\
      \        group_3 = bytes[7] | (bytes[6] << 8)\n          \n        group_type\
      \ = (group_1 >> 12) & 0xf\n        ab = (group_1 >> 11 ) & 0x1 # b if 1, a if\
      \ 0\n\n        \n        print(\"group_type:\", group_type) # this is essentially\
      \ message type, i only see type 0 and 2 in my recording\n        print(\"ab:\"\
      , ab)\n        print(\"rds_group_acronym:\", rds_group_acronyms[group_type])\n\
      \n        program_identification = group_0     # \"PI\"\n        \n        program_type\
      \ = (group_1 >> 5) & 0x1f # \"PTY\"\n        pty = pty_table[program_type][pty_locale]\n\
      \        \n        pi_country_identification = (program_identification >> 12)\
      \ & 0xf\n        \n        pi_area_coverage = (program_identification >> 8)\
      \ & 0xf\n        coverage_area = coverage_area_codes[pi_area_coverage]\n   \
      \     \n        pi_program_reference_number = program_identification & 0xff\
      \ # just an int\n        \n        \n        \n        print(\"PTY:\", pty)\n\
      \        print(\"program:\", pi_program_reference_number)\n        print(\"\
      coverage_area:\", coverage_area)\n\n        # I dont understand this part, US\
      \ isnt on the list\n        print(\"country:\")\n        print(pi_country_codes[pi_country_identification\
      \ - 1][0], end='')\n        print(pi_country_codes[pi_country_identification\
      \ - 1][1], end='')\n        print(pi_country_codes[pi_country_identification\
      \ - 1][2], end='')\n        print(pi_country_codes[pi_country_identification\
      \ - 1][3], end='')\n        print(pi_country_codes[pi_country_identification\
      \ - 1][4])\n\n        if group_type == 2:\n            self.decode_type2(group_1,\
      \ group_2, group_3, ab)\n        else:\n            print(\"unsupported group_type\"\
      )\n\n        \n        \n        \n        \n        \n        \n        \n\
      \        \n        \n        \n        \n        \n        \n        \n    \
      \    \n        \n        \n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('RDS Parser Python', 'blk', [], [('msg_in', 'message', 1)], [], 'Embedded
      Python Block example - a simple multiply const', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1456, 720.0]
    rotation: 0
    state: disabled
- name: fir_filter_xxx_0
  id: fir_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_delay: '0'
    taps: pilot_taps
    type: fcc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [936, 276.0]
    rotation: 0
    state: true
- name: fir_filter_xxx_1
  id: fir_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '5'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_delay: '0'
    taps: firdes.low_pass(1.0,240000,15e3,2e3)
    type: fff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1800, 228.0]
    rotation: 0
    state: enabled
- name: fir_filter_xxx_1_0
  id: fir_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '5'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_delay: '0'
    taps: firdes.low_pass(-2.1,240000,15e3,2e3)
    type: fff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1800, 324.0]
    rotation: 0
    state: enabled
- name: fir_filter_xxx_2
  id: fir_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_delay: '0'
    taps: rrc_taps_manchester
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1192, 476.0]
    rotation: 0
    state: disabled
- name: freq_xlating_fir_filter_xxx_0
  id: freq_xlating_fir_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    center_freq: freq_offset
    comment: ''
    decim: decimation
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    taps: firdes.low_pass(1, samp_rate, 100000, 20000)
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [272, 260.0]
    rotation: 0
    state: disabled
- name: freq_xlating_fir_filter_xxx_1_0
  id: freq_xlating_fir_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    center_freq: 57e3
    comment: ''
    decim: '10'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate / decimation
    taps: firdes.low_pass(1.0, samp_rate / decimation, 7.5e3, 5e3)
    type: fcf
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [656, 460.0]
    rotation: 0
    state: disabled
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import math
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12.0]
    rotation: 0
    state: enabled
- name: low_pass_filter_0
  id: low_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    cutoff_freq: 7.5e3
    decim: '1'
    gain: '1'
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate/8
    type: fir_filter_ccf
    width: 5e3
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1736, 836.0]
    rotation: 0
    state: disabled
- name: note_0
  id: note
  parameters:
    alias: ''
    comment: ''
    note: L+R
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1800, 172.0]
    rotation: 180
    state: enabled
- name: qtgui_const_sink_x_0
  id: qtgui_const_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'True'
    axislabels: 'True'
    color1: '"blue"'
    color10: '"red"'
    color2: '"red"'
    color3: '"red"'
    color4: '"red"'
    color5: '"red"'
    color6: '"red"'
    color7: '"red"'
    color8: '"red"'
    color9: '"red"'
    comment: ''
    grid: 'False'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '0'
    marker10: '0'
    marker2: '0'
    marker3: '0'
    marker4: '0'
    marker5: '0'
    marker6: '0'
    marker7: '0'
    marker8: '0'
    marker9: '0'
    name: '""'
    nconnections: '1'
    size: '200'
    style1: '0'
    style10: '0'
    style2: '0'
    style3: '0'
    style4: '0'
    style5: '0'
    style6: '0'
    style7: '0'
    style8: '0'
    style9: '0'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    xmax: '2'
    xmin: '-2'
    ymax: '2'
    ymin: '-2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1136, 804.0]
    rotation: 0
    state: enabled
- name: qtgui_freq_sink_x_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: samp_rate / decimation
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: '0'
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    norm_window: 'False'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: window.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 180.0]
    rotation: 0
    state: disabled
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '1024'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [272, 180.0]
    rotation: 0
    state: disabled
- name: qtgui_waterfall_sink_x_0
  id: qtgui_waterfall_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    axislabels: 'True'
    bw: samp_rate / decimation
    color1: '0'
    color10: '0'
    color2: '0'
    color3: '0'
    color4: '0'
    color5: '0'
    color6: '0'
    color7: '0'
    color8: '0'
    color9: '0'
    comment: ''
    fc: '0'
    fftsize: '1024'
    freqhalf: 'False'
    grid: 'False'
    gui_hint: ''
    int_max: '0'
    int_min: '-80'
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '""'
    nconnections: '1'
    showports: 'False'
    type: float
    update_time: '0.10'
    wintype: window.WIN_BLACKMAN_hARRIS
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 180.0]
    rotation: 0
    state: disabled
- name: rational_resampler_xxx_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: samp_rate // decimation
    fbw: '0'
    interp: '240000'
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: '[]'
    type: fff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [736, 260.0]
    rotation: 0
    state: true
- name: rational_resampler_xxx_1
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: samp_rate // decimation // 10
    fbw: '0'
    interp: '19000'
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: '[]'
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [944, 460.0]
    rotation: 0
    state: disabled
- name: rds_decoder_0
  id: rds_decoder
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    debug: 'False'
    log: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1280, 620.0]
    rotation: 0
    state: enabled
- name: rds_parser_0
  id: rds_parser
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    debug: 'True'
    log: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    pty_locale: '1'
    reset: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1440, 612.0]
    rotation: 0
    state: enabled
- name: uhd_usrp_source_0
  id: uhd_usrp_source
  parameters:
    affinity: ''
    alias: ''
    ant0: '"RX2"'
    ant1: '"RX2"'
    ant10: '"RX2"'
    ant11: '"RX2"'
    ant12: '"RX2"'
    ant13: '"RX2"'
    ant14: '"RX2"'
    ant15: '"RX2"'
    ant16: '"RX2"'
    ant17: '"RX2"'
    ant18: '"RX2"'
    ant19: '"RX2"'
    ant2: '"RX2"'
    ant20: '"RX2"'
    ant21: '"RX2"'
    ant22: '"RX2"'
    ant23: '"RX2"'
    ant24: '"RX2"'
    ant25: '"RX2"'
    ant26: '"RX2"'
    ant27: '"RX2"'
    ant28: '"RX2"'
    ant29: '"RX2"'
    ant3: '"RX2"'
    ant30: '"RX2"'
    ant31: '"RX2"'
    ant4: '"RX2"'
    ant5: '"RX2"'
    ant6: '"RX2"'
    ant7: '"RX2"'
    ant8: '"RX2"'
    ant9: '"RX2"'
    bw0: '0'
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    center_freq0: freq_tune
    center_freq1: '0'
    center_freq10: '0'
    center_freq11: '0'
    center_freq12: '0'
    center_freq13: '0'
    center_freq14: '0'
    center_freq15: '0'
    center_freq16: '0'
    center_freq17: '0'
    center_freq18: '0'
    center_freq19: '0'
    center_freq2: '0'
    center_freq20: '0'
    center_freq21: '0'
    center_freq22: '0'
    center_freq23: '0'
    center_freq24: '0'
    center_freq25: '0'
    center_freq26: '0'
    center_freq27: '0'
    center_freq28: '0'
    center_freq29: '0'
    center_freq3: '0'
    center_freq30: '0'
    center_freq31: '0'
    center_freq4: '0'
    center_freq5: '0'
    center_freq6: '0'
    center_freq7: '0'
    center_freq8: '0'
    center_freq9: '0'
    clock_rate: 0e0
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    dc_offs0: 0+0j
    dc_offs1: 0+0j
    dc_offs10: 0+0j
    dc_offs11: 0+0j
    dc_offs12: 0+0j
    dc_offs13: 0+0j
    dc_offs14: 0+0j
    dc_offs15: 0+0j
    dc_offs16: 0+0j
    dc_offs17: 0+0j
    dc_offs18: 0+0j
    dc_offs19: 0+0j
    dc_offs2: 0+0j
    dc_offs20: 0+0j
    dc_offs21: 0+0j
    dc_offs22: 0+0j
    dc_offs23: 0+0j
    dc_offs24: 0+0j
    dc_offs25: 0+0j
    dc_offs26: 0+0j
    dc_offs27: 0+0j
    dc_offs28: 0+0j
    dc_offs29: 0+0j
    dc_offs3: 0+0j
    dc_offs30: 0+0j
    dc_offs31: 0+0j
    dc_offs4: 0+0j
    dc_offs5: 0+0j
    dc_offs6: 0+0j
    dc_offs7: 0+0j
    dc_offs8: 0+0j
    dc_offs9: 0+0j
    dc_offs_enb0: default
    dc_offs_enb1: default
    dc_offs_enb10: default
    dc_offs_enb11: default
    dc_offs_enb12: default
    dc_offs_enb13: default
    dc_offs_enb14: default
    dc_offs_enb15: default
    dc_offs_enb16: default
    dc_offs_enb17: default
    dc_offs_enb18: default
    dc_offs_enb19: default
    dc_offs_enb2: default
    dc_offs_enb20: default
    dc_offs_enb21: default
    dc_offs_enb22: default
    dc_offs_enb23: default
    dc_offs_enb24: default
    dc_offs_enb25: default
    dc_offs_enb26: default
    dc_offs_enb27: default
    dc_offs_enb28: default
    dc_offs_enb29: default
    dc_offs_enb3: default
    dc_offs_enb30: default
    dc_offs_enb31: default
    dc_offs_enb4: default
    dc_offs_enb5: default
    dc_offs_enb6: default
    dc_offs_enb7: default
    dc_offs_enb8: default
    dc_offs_enb9: default
    dev_addr: '""'
    dev_args: ''
    gain0: '70'
    gain1: '0'
    gain10: '0'
    gain11: '0'
    gain12: '0'
    gain13: '0'
    gain14: '0'
    gain15: '0'
    gain16: '0'
    gain17: '0'
    gain18: '0'
    gain19: '0'
    gain2: '0'
    gain20: '0'
    gain21: '0'
    gain22: '0'
    gain23: '0'
    gain24: '0'
    gain25: '0'
    gain26: '0'
    gain27: '0'
    gain28: '0'
    gain29: '0'
    gain3: '0'
    gain30: '0'
    gain31: '0'
    gain4: '0'
    gain5: '0'
    gain6: '0'
    gain7: '0'
    gain8: '0'
    gain9: '0'
    gain_type0: default
    gain_type1: default
    gain_type10: default
    gain_type11: default
    gain_type12: default
    gain_type13: default
    gain_type14: default
    gain_type15: default
    gain_type16: default
    gain_type17: default
    gain_type18: default
    gain_type19: default
    gain_type2: default
    gain_type20: default
    gain_type21: default
    gain_type22: default
    gain_type23: default
    gain_type24: default
    gain_type25: default
    gain_type26: default
    gain_type27: default
    gain_type28: default
    gain_type29: default
    gain_type3: default
    gain_type30: default
    gain_type31: default
    gain_type4: default
    gain_type5: default
    gain_type6: default
    gain_type7: default
    gain_type8: default
    gain_type9: default
    iq_imbal0: 0+0j
    iq_imbal1: 0+0j
    iq_imbal10: 0+0j
    iq_imbal11: 0+0j
    iq_imbal12: 0+0j
    iq_imbal13: 0+0j
    iq_imbal14: 0+0j
    iq_imbal15: 0+0j
    iq_imbal16: 0+0j
    iq_imbal17: 0+0j
    iq_imbal18: 0+0j
    iq_imbal19: 0+0j
    iq_imbal2: 0+0j
    iq_imbal20: 0+0j
    iq_imbal21: 0+0j
    iq_imbal22: 0+0j
    iq_imbal23: 0+0j
    iq_imbal24: 0+0j
    iq_imbal25: 0+0j
    iq_imbal26: 0+0j
    iq_imbal27: 0+0j
    iq_imbal28: 0+0j
    iq_imbal29: 0+0j
    iq_imbal3: 0+0j
    iq_imbal30: 0+0j
    iq_imbal31: 0+0j
    iq_imbal4: 0+0j
    iq_imbal5: 0+0j
    iq_imbal6: 0+0j
    iq_imbal7: 0+0j
    iq_imbal8: 0+0j
    iq_imbal9: 0+0j
    iq_imbal_enb0: default
    iq_imbal_enb1: default
    iq_imbal_enb10: default
    iq_imbal_enb11: default
    iq_imbal_enb12: default
    iq_imbal_enb13: default
    iq_imbal_enb14: default
    iq_imbal_enb15: default
    iq_imbal_enb16: default
    iq_imbal_enb17: default
    iq_imbal_enb18: default
    iq_imbal_enb19: default
    iq_imbal_enb2: default
    iq_imbal_enb20: default
    iq_imbal_enb21: default
    iq_imbal_enb22: default
    iq_imbal_enb23: default
    iq_imbal_enb24: default
    iq_imbal_enb25: default
    iq_imbal_enb26: default
    iq_imbal_enb27: default
    iq_imbal_enb28: default
    iq_imbal_enb29: default
    iq_imbal_enb3: default
    iq_imbal_enb30: default
    iq_imbal_enb31: default
    iq_imbal_enb4: default
    iq_imbal_enb5: default
    iq_imbal_enb6: default
    iq_imbal_enb7: default
    iq_imbal_enb8: default
    iq_imbal_enb9: default
    lo_export0: 'False'
    lo_export1: 'False'
    lo_export10: 'False'
    lo_export11: 'False'
    lo_export12: 'False'
    lo_export13: 'False'
    lo_export14: 'False'
    lo_export15: 'False'
    lo_export16: 'False'
    lo_export17: 'False'
    lo_export18: 'False'
    lo_export19: 'False'
    lo_export2: 'False'
    lo_export20: 'False'
    lo_export21: 'False'
    lo_export22: 'False'
    lo_export23: 'False'
    lo_export24: 'False'
    lo_export25: 'False'
    lo_export26: 'False'
    lo_export27: 'False'
    lo_export28: 'False'
    lo_export29: 'False'
    lo_export3: 'False'
    lo_export30: 'False'
    lo_export31: 'False'
    lo_export4: 'False'
    lo_export5: 'False'
    lo_export6: 'False'
    lo_export7: 'False'
    lo_export8: 'False'
    lo_export9: 'False'
    lo_source0: internal
    lo_source1: internal
    lo_source10: internal
    lo_source11: internal
    lo_source12: internal
    lo_source13: internal
    lo_source14: internal
    lo_source15: internal
    lo_source16: internal
    lo_source17: internal
    lo_source18: internal
    lo_source19: internal
    lo_source2: internal
    lo_source20: internal
    lo_source21: internal
    lo_source22: internal
    lo_source23: internal
    lo_source24: internal
    lo_source25: internal
    lo_source26: internal
    lo_source27: internal
    lo_source28: internal
    lo_source29: internal
    lo_source3: internal
    lo_source30: internal
    lo_source31: internal
    lo_source4: internal
    lo_source5: internal
    lo_source6: internal
    lo_source7: internal
    lo_source8: internal
    lo_source9: internal
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    otw: ''
    rx_agc0: Default
    rx_agc1: Default
    rx_agc10: Default
    rx_agc11: Default
    rx_agc12: Default
    rx_agc13: Default
    rx_agc14: Default
    rx_agc15: Default
    rx_agc16: Default
    rx_agc17: Default
    rx_agc18: Default
    rx_agc19: Default
    rx_agc2: Default
    rx_agc20: Default
    rx_agc21: Default
    rx_agc22: Default
    rx_agc23: Default
    rx_agc24: Default
    rx_agc25: Default
    rx_agc26: Default
    rx_agc27: Default
    rx_agc28: Default
    rx_agc29: Default
    rx_agc3: Default
    rx_agc30: Default
    rx_agc31: Default
    rx_agc4: Default
    rx_agc5: Default
    rx_agc6: Default
    rx_agc7: Default
    rx_agc8: Default
    rx_agc9: Default
    samp_rate: samp_rate
    sd_spec0: ''
    sd_spec1: ''
    sd_spec2: ''
    sd_spec3: ''
    sd_spec4: ''
    sd_spec5: ''
    sd_spec6: ''
    sd_spec7: ''
    show_lo_controls: 'False'
    start_time: '-1.0'
    stream_args: ''
    stream_chans: '[]'
    sync: none
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 252.0]
    rotation: 0
    state: disabled

connections:
- [analog_agc_xx_0, '0', blocks_file_sink_1, '0']
- [analog_agc_xx_0, '0', digital_clock_recovery_mm_xx_0, '0']
- [analog_agc_xx_0, '0', digital_symbol_sync_xx_0, '0']
- [analog_agc_xx_0, '0', digital_symbol_sync_xx_0_0, '0']
- [analog_const_source_x_0, '0', blocks_float_to_complex_0, '1']
- [analog_fm_deemph_0_0_0, '0', blocks_multiply_const_vxx_0, '0']
- [analog_pll_refout_cc_0, '0', blocks_multiply_xx_0, '0']
- [analog_pll_refout_cc_0, '0', blocks_multiply_xx_0, '1']
- [analog_quadrature_demod_cf_0, '0', freq_xlating_fir_filter_xxx_1_0, '0']
- [analog_quadrature_demod_cf_0, '0', qtgui_waterfall_sink_x_0, '0']
- [analog_quadrature_demod_cf_0, '0', rational_resampler_xxx_0, '0']
- [analog_sig_source_x_0, '0', blocks_multiply_xx_2, '1']
- [blocks_add_xx_0, '0', analog_fm_deemph_0_0_0, '0']
- [blocks_complex_to_imag_0, '0', blocks_multiply_xx_1, '1']
- [blocks_delay_0, '0', blocks_multiply_xx_1, '0']
- [blocks_delay_0, '0', fir_filter_xxx_1, '0']
- [blocks_file_source_0, '0', analog_quadrature_demod_cf_0, '0']
- [blocks_file_source_0, '0', epy_block_0, '0']
- [blocks_file_source_0, '0', qtgui_freq_sink_x_0, '0']
- [blocks_file_source_0_0, '0', analog_quadrature_demod_cf_0, '0']
- [blocks_file_source_0_0, '0', epy_block_0, '0']
- [blocks_float_to_complex_0, '0', blocks_multiply_xx_2, '0']
- [blocks_head_0, '0', blocks_file_sink_0, '0']
- [blocks_keep_one_in_n_0, '0', rational_resampler_xxx_1, '0']
- [blocks_multiply_const_vxx_0, '0', audio_sink_0, '0']
- [blocks_multiply_xx_0, '0', blocks_complex_to_imag_0, '0']
- [blocks_multiply_xx_1, '0', fir_filter_xxx_1_0, '0']
- [blocks_multiply_xx_2, '0', low_pass_filter_0, '0']
- [digital_clock_recovery_mm_xx_0, '0', digital_constellation_receiver_cb_0, '0']
- [digital_clock_recovery_mm_xx_0, '0', qtgui_const_sink_x_0, '0']
- [digital_constellation_receiver_cb_0, '0', digital_diff_decoder_bb_0, '0']
- [digital_constellation_receiver_cb_0, '1', blocks_null_sink_0_1, '0']
- [digital_constellation_receiver_cb_0, '2', blocks_null_sink_0, '0']
- [digital_constellation_receiver_cb_0, '3', blocks_null_sink_0_0, '0']
- [digital_diff_decoder_bb_0, '0', blocks_file_sink_2, '0']
- [digital_diff_decoder_bb_0, '0', epy_block_4, '0']
- [digital_diff_decoder_bb_0, '0', rds_decoder_0, '0']
- [digital_symbol_sync_xx_0, '0', digital_constellation_receiver_cb_0, '0']
- [digital_symbol_sync_xx_0, '0', qtgui_const_sink_x_0, '0']
- [digital_symbol_sync_xx_0_0, '0', digital_constellation_receiver_cb_0, '0']
- [digital_symbol_sync_xx_0_0, '0', qtgui_const_sink_x_0, '0']
- [epy_block_0, '0', blocks_float_to_complex_0, '0']
- [epy_block_0, '0', epy_block_1, '0']
- [epy_block_0, '0', freq_xlating_fir_filter_xxx_1_0, '0']
- [epy_block_0, '0', rational_resampler_xxx_0, '0']
- [epy_block_1, '0', epy_block_2, '0']
- [epy_block_1, '0', rational_resampler_xxx_1, '0']
- [epy_block_2, '0', epy_block_3, '0']
- [epy_block_2, '0', fir_filter_xxx_2, '0']
- [epy_block_3, '0', analog_agc_xx_0, '0']
- [epy_block_3, '0', digital_clock_recovery_mm_xx_0, '0']
- [epy_block_3, '0', digital_symbol_sync_xx_0, '0']
- [epy_block_4, msg_out, rds_parser_0, in]
- [fir_filter_xxx_0, '0', analog_pll_refout_cc_0, '0']
- [fir_filter_xxx_1, '0', blocks_add_xx_0, '0']
- [fir_filter_xxx_1_0, '0', blocks_add_xx_0, '1']
- [fir_filter_xxx_2, '0', analog_agc_xx_0, '0']
- [freq_xlating_fir_filter_xxx_0, '0', analog_quadrature_demod_cf_0, '0']
- [freq_xlating_fir_filter_xxx_0, '0', blocks_head_0, '0']
- [freq_xlating_fir_filter_xxx_0, '0', qtgui_freq_sink_x_0, '0']
- [freq_xlating_fir_filter_xxx_1_0, '0', epy_block_2, '0']
- [freq_xlating_fir_filter_xxx_1_0, '0', rational_resampler_xxx_1, '0']
- [low_pass_filter_0, '0', blocks_keep_one_in_n_0, '0']
- [rational_resampler_xxx_0, '0', blocks_delay_0, '0']
- [rational_resampler_xxx_0, '0', fir_filter_xxx_0, '0']
- [rational_resampler_xxx_1, '0', fir_filter_xxx_2, '0']
- [rds_decoder_0, out, blocks_message_debug_0, print]
- [rds_decoder_0, out, epy_block_5, msg_in]
- [rds_decoder_0, out, rds_parser_0, in]
- [rds_parser_0, out, blocks_message_debug_0, print]
- [uhd_usrp_source_0, '0', freq_xlating_fir_filter_xxx_0, '0']
- [uhd_usrp_source_0, '0', qtgui_time_sink_x_0, '0']

metadata:
  file_format: 1
